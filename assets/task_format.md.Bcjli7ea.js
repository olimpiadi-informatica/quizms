import{_ as e,c as i,o as a,a0 as t}from"./chunks/framework.oTSD2LDJ.js";const c=JSON.parse('{"title":"Problem Format","description":"","frontmatter":{},"headers":[],"relativePath":"task/format.md","filePath":"task/format.md"}'),n={name:"task/format.md"};function l(o,s,r,h,p,d){return a(),i("div",null,s[0]||(s[0]=[t(`<h1 id="problem-format" tabindex="-1">Problem Format <a class="header-anchor" href="#problem-format" aria-label="Permalink to &quot;Problem Format&quot;">​</a></h1><p>Each problem is represented by a <strong>Markdown</strong> file:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">What is 2 + 2?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 2</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 3</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-light-text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 4</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">&gt; The solution is 4.</span></span></code></pre></div><p>The file is composed of four parts:</p><ul><li><strong>the header</strong>: automatically generated with the problem number, e.g. <code>Question 1</code>, <code>Question 2</code>, etc.;</li><li><strong>the statement</strong>: the description of what the problem is asking;</li><li><strong>the answers</strong>: the part where the user chooses the correct answer;</li><li><strong>the solution</strong>: the explanation of how to solve the problem, shown after the test is completed.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Answers and the solution can be placed anywhere in the text, but it is recommended to put them at the end of the problem.</p></div><p>It is also possible to define problems using <a href="https://mdxjs.com/" target="_blank" rel="noreferrer">MDX</a> (Markdown with JavaScript), which allows for interactive parts of the problem using JavaScript, such as a <a href="./blockly.html">block-based code editor</a>.</p><h2 id="problem-statement" tabindex="-1">Problem statement <a class="header-anchor" href="#problem-statement" aria-label="Permalink to &quot;Problem statement&quot;">​</a></h2><p>The statement is the main part of the problem. It can be formatted using Markdown. Most <a href="https://www.markdownguide.org/basic-syntax/" target="_blank" rel="noreferrer">Markdown features</a> are supported, as well as some extensions, including:</p><ul><li><a href="https://www.markdownguide.org/extended-syntax/#syntax-highlighting" target="_blank" rel="noreferrer">syntax-highlighted code</a> (also for <a href="./pseudocode.svg">pseudocode</a>);</li><li><a href="./images.html">images</a>;</li><li><a href="https://www.markdownguide.org/extended-syntax/#tables" target="_blank" rel="noreferrer">tables</a>;</li><li><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics" target="_blank" rel="noreferrer">LaTeX math formulas</a> (<code>$...$</code>).</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The following features are <strong>not</strong> supported:</p><ul><li>blockquotes: this syntax is used to indicate the solution;</li><li>horizontal rule (<code>---</code>): this syntax is used to separate subproblems;</li><li>TODO lists: this syntax is used to define the answers.</li></ul></div><h2 id="answers" tabindex="-1">Answers <a class="header-anchor" href="#answers" aria-label="Permalink to &quot;Answers&quot;">​</a></h2><p>Answers can be of three types:</p><ul><li><p><strong>multiple-choice answers</strong>, defined using a <a href="https://www.markdownguide.org/extended-syntax/#task-lists" target="_blank" rel="noreferrer">TODO list</a> where the correct answer is marked with an <code>x</code>:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] answer 1</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-light-text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] answer 2</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] answer 3</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] answer 4</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It is possible to indicate multiple correct answers (e.g., in case of typos), but the user can select only one answer.</p></div></li><li><p><strong>open-ended answer</strong>, defined with the <code>?&gt;</code> syntax:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt; answer</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>An open-ended answer can be at most 100 characters long.</p></div></li><li><p><a href="./blockly.html">block-based code</a>: the user can use an integrated editor to implement a solution using block-based programming.</p></li></ul><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><p>The solution is defined using a <a href="https://www.markdownguide.org/basic-syntax/#blockquotes-1" target="_blank" rel="noreferrer">blockquote</a> and can itself be formatted with Markdown:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">&gt; the</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">&gt; </span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;">**solution**</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">&gt; to the</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">&gt; </span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">_problem_</span></span></code></pre></div><p>During the competition, the solution is not visible to the user. It is only available after the test is finished in training mode.</p><h2 id="subproblems" tabindex="-1">Subproblems <a class="header-anchor" href="#subproblems" aria-label="Permalink to &quot;Subproblems&quot;">​</a></h2><p>It is possible to define multiple subproblems in the same file by separating them with three dashes <code>---</code>:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Subproblem 1 ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-light-text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] Yes</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] No</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Subproblem 2 ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] Yes</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-light-text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] No</span></span></code></pre></div><p>Each subproblem has its own text, answers, solution, and a header automatically generated with the problem and subproblem number, e.g., <code>Question 1.1</code>, <code>Question 1.2</code>, etc.</p>`,22)]))}const g=e(n,[["render",l]]);export{c as __pageData,g as default};
